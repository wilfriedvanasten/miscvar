<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language [
<!ENTITY pattern "([^|&quot;])((?!\1).)*\1">
]>
<language name="VIM" version="4" kateversion="5.0" section="Scripts" extensions="*.vim">
  <highlighting>
    <list name="tasks">
      <item>TODO</item>
      <item>FIXME</item>
      <item>XXX</item>
    </list>
    <list name="userCommandEscapeSequences">
      <item>&lt;lt&gt;</item>
      <item>&lt;line1&gt;</item>
      <item>&lt;line2&gt;</item>
      <item>&lt;count&gt;</item>
      <item>&lt;args&gt;</item>
      <item>&lt;bang&gt;</item>
      <item>&lt;reg&gt;</item>
      <item>&lt;register&gt;</item>
      <item>&lt;q-args&gt;</item>
      <item>&lt;f-args&gt;</item>
    </list>
    <list name="mapOptions">
      <item>&lt;buffer&gt;</item>
      <item>&lt;silent&gt;</item>
      <item>&lt;expr&gt;</item>
      <item>&lt;special&gt;</item>
      <item>&lt;script&gt;</item>
      <item>&lt;unique&gt;</item>
    </list>
    <list name="beginBlockFlow">
      <item>try</item>
    </list>
    <list name="endBlockFlow">
      <item>endif</item>
      <item>endfor</item>
      <item>endwhile</item>
      <item>endtry</item>
    </list>
    <list name="flow">
      <item>else</item>
      <item>continue</item>
      <item>break</item>
      <!-- TODO: Only keyword in for loop -->
      <item>in</item>
      <item>finally</item>
      <item>finish</item>
      <item>throw</item>
    </list>
    <list name="fileBufferOptions">
      <item>fileformat</item>
      <item>encoding</item>
      <item>binary</item>
      <item>nobinary</item>
      <item>bad</item>
      <item>edit</item>
    </list>
    <list name="fileBufferCommands">
      <item>Next</item>
      <item>args</item>
      <item>argedit</item>
      <item>argglobal</item>
      <item>arglocal</item>
      <item>argument</item>
      <item>drop</item>
      <item>edit</item>
      <item>ex</item>
      <item>find</item>
      <item>first</item>
    </list>
    <list name="simpleCommands">
      <item>Print</item>
      <item>X</item>
      <item>abclear</item>
      <item>all</item>
      <item>argadd</item>
      <item>argdelete</item>
      <item>ascii</item>
      <item>augroup</item>
      <item>aunmenu</item>
      <item>buffer</item>
      <item>bNext</item>
      <item>ball</item>
      <item>badd</item>
      <item>bdelete</item>
      <item>behave</item>
      <item>bfirst</item>
      <item>blast</item>
      <item>bmodified</item>
      <item>bnext</item>
      <item>bprevious</item>
      <item>brewind</item>
      <item>break</item>
      <item>breakadd</item>
      <item>breakdel</item>
      <item>breaklist</item>
      <item>browse</item>
      <item>buffers</item>
      <item>bunload</item>
      <item>bwipeout</item>
      <item>cNext</item>
      <item>cNfile</item>
      <item>cabclear</item>
      <item>caddbuffer</item>
      <item>caddfile</item>
      <item>cbuffer</item>
      <item>cc</item>
      <item>cclose</item>
      <item>cd</item>
      <item>center</item>
      <item>cfile</item>
      <item>cfirst</item>
      <item>cgetbuffer</item>
      <item>cgetfile</item>
      <item>changes</item>
      <item>chdir</item>
      <item>checkpath</item>
      <item>checktime</item>
      <item>clist</item>
      <item>clast</item>
      <item>close</item>
      <item>cmapclear</item>
      <item>cnext</item>
      <item>cnewer</item>
      <item>cnfile</item>
      <item>copy</item>
      <item>colder</item>
      <item>colorscheme</item>
      <item>comclear</item>
      <item>compiler</item>
      <item>continue</item>
      <item>copen</item>
      <item>cprevious</item>
      <item>cpfile</item>
      <item>cquit</item>
      <item>crewind</item>
      <item>cstag</item>
      <item>cunmap</item>
      <item>cunabbrev</item>
      <item>cunmenu</item>
      <item>cwindow</item>
      <item>delete</item>
      <item>delmarks</item>
      <item>debuggreedy</item>
      <item>diffupdate</item>
      <item>diffget</item>
      <item>diffoff</item>
      <item>diffpatch</item>
      <item>diffput</item>
      <item>diffsplit</item>
      <item>diffthis</item>
      <item>digraphs</item>
      <item>djump</item>
      <item>dlist</item>
      <item>dsearch</item>
      <item>dsplit</item>
      <item>earlier</item>
      <item>echohl</item>
      <item>enew</item>
      <item>exit</item>
      <item>exusage</item>
      <item>file</item>
      <item>files</item>
      <item>filetype</item>
      <item>fixdel</item>
      <item>fold</item>
      <item>foldclose</item>
      <item>foldopen</item>
    </list>
    <list name="registerCommands">
      <item>display</item>
    </list>
    <list name="commandCommands">
      <item>aboveleft</item>
      <item>argdo</item>
      <item>belowright</item>
      <item>botright</item>
      <item>bufdo</item>
      <item>confirm</item>
      <item>debug</item>
      <item>folddoopen</item>
      <item>folddoclosed</item>
    </list>
    <list name="exprCommands">
      <item>caddexpr</item>
      <item>cexpr</item>
      <item>cgetexpr</item>
      <item>echo</item>
      <item>echoerr</item>
      <item>echomsg</item>
      <item>echon</item>
      <item>execute</item>
    </list>
    <list name="lineCommands">
      <item>append</item>
      <item>change</item>
      <item>insert</item>
    </list>
    <!-- Commands that behave like map.  -->
    <list name="mapCommands">
      <item>abbreviate</item>
      <item>cabbrev</item>
      <item>cmap</item>
      <item>cnoremap</item>
      <item>cnoreabbrev</item>
    </list>
    <list name="menuCommands">
      <item>amenu</item>
      <item>anoremenu</item>
      <item>cmenu</item>
      <item>cnoremenu</item>
      <item>emenu</item>
    </list>
    <list name="patternCommands">
    </list>
    <list name="builtInCommand">
      <!-- TODO: Implement CScope highlighting -->
      <item>cscope</item>
      <!-- TODO: Generic command does to much for these -->
      <item>doautocmd</item>
      <item>doautoall</item>
      <item>function</item>
      <!-- TODO: Takes pattern and then command -->
      <item>global</item>
      <item>goto</item>
      <!-- TODO: Executes grep. No Comments -->
      <item>grep</item>
      <!-- TODO: Like grep -->
      <item>grepadd</item>
      <item>gui</item>
      <item>gvim</item>
      <item>hardcopy</item>
      <item>help</item>
      <item>helpfind</item>
      <!-- TODO: Like grep -->
      <item>helpgrep</item>
      <item>helptags</item>
      <item>highlight</item>
      <item>hide</item>
      <item>history</item>
      <!-- TODO: Like abbreviate -->
      <item>iabbrev</item>
      <item>iabclear</item>
      <item>if</item>
      <item>ijump</item>
      <item>ilist</item>
      <!-- TODO: Like map -->
      <item>imap</item>
      <item>imapclear</item>
      <!-- TODO: Like amenu -->
      <item>imenu</item>
      <!-- TODO: Like amenu -->
      <item>inoremap</item>
      <!-- TODO: Like abbreviate -->
      <item>inoreabbrev</item>
      <!-- TODO: Like amenu -->
      <item>inoremenu</item>
      <item>intro</item>
      <item>isearch</item>
      <item>isplit</item>
      <item>iunmap</item>
      <item>iunabbrev</item>
      <item>iunmenu</item>
      <item>join</item>
      <item>jumps</item>
      <item>k</item>
      <!-- TODO: Takes command -->
      <item>keepalt</item>
      <item>keepmarks</item>
      <!-- TODO: Takes command -->
      <item>keepjjumps</item>
      <item>lNext</item>
      <item>lNfile</item>
      <item>list</item>
      <!-- TODO: Takes expression -->
      <item>laddexpr</item>
      <item>laddbuffer</item>
      <item>laddfile</item>
      <item>last</item>
      <item>language</item>
      <item>later</item>
      <item>lbuffer</item>
      <item>lcd</item>
      <item>lchdir</item>
      <item>lclose</item>
      <item>lcscope</item>
      <item>left</item>
      <item>leftabove</item>
      <!-- TODO: No comments
                Definition syntax: let variable(= value) variable (= value).
                Value must escape spaces.
                Use expression after =.
            -->
      <item>let</item>
      <!-- TODO: No comments, takes expression -->
      <item>lexpr</item>
      <item>lfile</item>
      <item>lfirst</item>
      <item>lgetbuffer</item>
      <!-- TODO: No comments, takes expression -->
      <item>lgetexpr</item>
      <item>lgetfile</item>
      <!-- TODO: Like grep -->
      <item>lgrep</item>
      <!-- TODO: Like grep -->
      <item>lgrepadd</item>
      <!-- TODO: Like grep -->
      <item>lhelpgrep</item>
      <item>ll</item>
      <item>llast</item>
      <item>llist</item>
      <!-- TODO: Like make -->
      <item>lmake</item>
      <!-- TODO: Like map -->
      <item>lmap</item>
      <item>lmapclear</item>
      <item>lnext</item>
      <item>lnewer</item>
      <item>lnfile</item>
      <!-- TODO: Like map -->
      <item>lnoremap</item>
      <!-- TODO: Makes remainder of file keybindings -->
      <item>loadkeymap</item>
      <item>loadview</item>
      <!-- TODO: Takes command -->
      <item>lockmarks</item>
      <item>lockvar</item>
      <item>lolder</item>
      <item>lopen</item>
      <item>lprevious</item>
      <item>lpfile</item>
      <item>lrewind</item>
      <item>ls</item>
      <item>ltag</item>
      <item>lunmap</item>
      <!-- TODO: Involve lua syntax -->
      <item>lua</item>
      <!-- TODO: Involve lua syntax -->
      <item>luado</item>
      <item>luafile</item>
      <!-- TODO: No comments -->
      <item>lvimgrep</item>
      <item>lvimgrepadd</item>
      <item>lwindow</item>
      <item>move</item>
      <item>mark</item>
      <!-- TODO: Executes make, No comments No bar -->
      <item>make</item>
      <!-- TODO: No comments. RHS may be an expression or a command. Check for <expr> -->
      <item>map</item>
      <item>mapclear</item>
      <item>marks</item>
      <item>match</item>
      <!-- TODO: Like amenu -->
      <item>menu</item>
      <item>menutranslate</item>
      <item>messages</item>
      <item>mkexrc</item>
      <item>mksession</item>
      <item>mkspell</item>
      <item>mkvimrc</item>
      <item>mkview</item>
      <item>mode</item>
      <item>mzscheme</item>
      <item>mzfile</item>
      <item>nbclose</item>
      <item>nbkey</item>
      <item>nbstart</item>
      <item>next</item>
      <item>new</item>
      <!-- TODO: Like map -->
      <item>nmap</item>
      <item>nmapclear</item>
      <!-- TODO: Like amenu -->
      <item>nmenu</item>
      <!-- TODO: Like map -->
      <item>nnoremap</item>
      <!-- TODO: Like amenu -->
      <item>nnoremenu</item>
      <!-- TODO: Takes command -->
      <item>noautocmd</item>
      <!-- TODO: Like map -->
      <item>noremap</item>
      <item>nohlsearch</item>
      <!-- TODO: Like abbreviate -->
      <item>noreabbrev</item>
      <!-- TODO: Like amenu -->
      <item>noremenu</item>
      <item>normal</item>
      <item>number</item>
      <item>nunmap</item>
      <item>nunmenu</item>
      <item>oldfiles</item>
      <item>open</item>
      <!-- TODO: Like map -->
      <item>omap</item>
      <item>omapclear</item>
      <!-- TODO: Like amenu -->
      <item>omenu</item>
      <item>only</item>
      <!-- TODO: Like map -->
      <item>onoremap</item>
      <!-- TODO: Like amenu -->
      <item>onoremenu</item>
      <item>options</item>
      <item>ounmap</item>
      <item>ounmenu</item>
      <item>ownsyntax</item>
      <item>pclose</item>
      <item>pedit</item>
      <!-- TODO: Involve perl syntax -->
      <item>perl</item>
      <item>print</item>
      <item>profdel</item>
      <item>profile</item>
      <item>promptfind</item>
      <item>promptrepl</item>
      <!-- TODO: Involve perl syntax -->
      <item>perldo</item>
      <item>pop</item>
      <item>popup</item>
      <item>ppop</item>
      <item>preserve</item>
      <item>previous</item>
      <item>psearch</item>
      <item>ptag</item>
      <item>ptNext</item>
      <item>ptfirst</item>
      <item>ptjump</item>
      <item>ptlast</item>
      <item>ptnext</item>
      <item>ptprevious</item>
      <item>ptrewind</item>
      <item>ptselect</item>
      <item>put</item>
      <item>pwd</item>
      <!-- TODO: Involve python highlighting -->
      <item>python3</item>
      <item>py3file</item>
      <!-- TODO: Involve python highlighting -->
      <item>python</item>
      <item>pyfile</item>
      <item>quit</item>
      <item>quitall</item>
      <item>qall</item>
      <item>read</item>
      <item>recover</item>
      <item>redo</item>
      <item>redir</item>
      <item>redraw</item>
      <item>redrawstatus</item>
      <item>registers</item>
      <item>resize</item>
      <item>retab</item>
      <item>return</item>
      <item>rewind</item>
      <item>right</item>
      <item>rightbelow</item>
      <!-- TODO: Involve ruby highlighting -->
      <item>ruby</item>
      <item>rubydo</item>
      <item>rubyfile</item>
      <item>rundo</item>
      <item>runtime</item>
      <item>rviminfo</item>
      <!-- TODO: Patterns!!! -->
      <item>substitute</item>
      <item>sNext</item>
      <item>list</item>
      <item>sandbox</item>
      <item>sargument</item>
      <item>sall</item>
      <item>saveas</item>
      <item>sbuffer</item>
      <item>sbNext</item>
      <item>list</item>
      <item>sball</item>
      <item>sbfirst</item>
      <item>sblast</item>
      <item>sbmodified</item>
      <item>sbnext</item>
      <item>sbprevious</item>
      <item>sbrewind</item>
      <item>scriptnames</item>
      <item>scriptencoding</item>
      <item>scscope</item>
      <!-- TODO: Similar to let, but more limited. Does not except expressions -->
      <item>set</item>
      <item>setfiletype</item>
      <!-- TODO: Like set -->
      <item>setglobal</item>
      <item>setlocal</item>
      <item>sfind</item>
      <item>sfirst</item>
      <item>shell</item>
      <item>simalt</item>
      <item>sign</item>
      <!-- TODO: Takes a command -->
      <item>silent</item>
      <item>sleep</item>
      <item>slast</item>
      <item>smagic</item>
      <!-- TODO: Like map -->
      <item>smap</item>
      <item>smapclear</item>
      <!-- TODO: Line amenu -->
      <item>smenu</item>
      <item>snext</item>
      <item>sniff</item>
      <item>snomagic</item>
      <!-- TODO: Like map -->
      <item>snoremap</item>
      <!-- TODO: Like amenu -->
      <item>snoremenu</item>
      <item>sort</item>
      <item>source</item>
      <item>spelldump</item>
      <item>spellgood</item>
      <item>spellinfo</item>
      <item>spellrepall</item>
      <item>spellundo</item>
      <item>spellwrong</item>
      <item>split</item>
      <item>sprevious</item>
      <item>srewind</item>
      <item>stop</item>
      <item>stag</item>
      <item>startinsert</item>
      <item>startgreplace</item>
      <item>startreplace</item>
      <item>stopinsert</item>
      <item>stjump</item>
      <item>stselect</item>
      <item>sunhide</item>
      <item>sunmap</item>
      <item>sunmenu</item>
      <item>suspend</item>
      <item>sview</item>
      <item>swapname</item>
      <!-- TODO: Accepts patterns and various arguments -->
      <item>syntax</item>
      <item>syncbind</item>
      <item>t</item>
      <item>tNext</item>
      <item>tabNext</item>
      <item>tabclose</item>
      <!-- TODO: Takes commands -->
      <item>tabdo</item>
      <item>tabedit</item>
      <item>tabfind</item>
      <item>tabfirst</item>
      <item>tablast</item>
      <item>tabmove</item>
      <item>tabnew</item>
      <item>tabnext</item>
      <item>tabonly</item>
      <item>tabprevious</item>
      <item>tabrewind</item>
      <item>tabs</item>
      <item>tab</item>
      <item>tag</item>
      <item>tags</item>
      <!-- TODO: Involve tcl highlighting -->
      <item>tcl</item>
      <item>tcldo</item>
      <item>tclfile</item>
      <item>tearoff</item>
      <item>tfirst</item>
      <item>throw</item>
      <item>tjump</item>
      <item>tlast</item>
      <item>tmenu</item>
      <item>tnext</item>
      <item>topleft</item>
      <item>tprevious</item>
      <item>trewind</item>
      <item>try</item>
      <item>tselect</item>
      <item>tunmenu</item>
      <item>undo</item>
      <item>undojoin</item>
      <item>undolist</item>
      <item>unabbreviate</item>
      <item>unhide</item>
      <item>unlet</item>
      <item>unlockvar</item>
      <item>unmap</item>
      <item>unmenu</item>
      <item>unsilent</item>
      <item>update</item>
      <item>v</item>
      <!-- TODO: Like global -->
      <item>vglobal</item>
      <item>version</item>
      <item>verbose</item>
      <item>vertical</item>
      <!-- TODO: No comments, Takes pattern -->
      <item>vimgrep</item>
      <!-- TODO: No comments, Takes pattern -->
      <item>vimgrepadd</item>
      <item>visual</item>
      <item>viusage</item>
      <item>view</item>
      <!-- TODO: Like map -->
      <item>vmap</item>
      <item>vmapclear</item>
      <!-- TODO: Like amenu -->
      <item>vmenu</item>
      <item>vnew</item>
      <!-- TODO: Like map -->
      <item>vnoremap</item>
      <!-- TODO: Like amenu -->
      <item>vnoremenu</item>
      <item>vsplit</item>
      <item>vunmap</item>
      <item>vunmenu</item>
      <!-- TODO: Takes command -->
      <item>windo</item>
      <item>write</item>
      <item>wNext</item>
      <item>wall</item>
      <item>while</item>
      <item>winsize</item>
      <!-- TODO: Window command? -->
      <item>wincmd</item>
      <item>winpos</item>
      <item>wnext</item>
      <item>wprevious</item>
      <item>wq</item>
      <item>wqall</item>
      <item>wsverb</item>
      <item>wundo</item>
      <item>wviminfo</item>
      <item>xit</item>
      <item>xall</item>
      <item>xmapclear</item>
      <!-- TODO: Like map -->
      <item>xmap</item>
      <!-- TODO: Like amenu -->
      <item>xmenu</item>
      <!-- TODO: Like map -->
      <item>xnoremap</item>
      <!-- TODO: Like amenu -->
      <item>xnoremenu</item>
      <item>xunmap</item>
      <item>xunmenu</item>
      <item>yank</item>
      <item>z</item>
    </list>
    <list name="events">
      <item>BufNewFile</item>
      <item>BufReadPre</item>
      <item>BufRead</item>
      <item>BufReadPost</item>
      <item>BufReadCmd</item>
      <item>FileReadPre</item>
      <item>FileReadPost</item>
      <item>FileReadCmd</item>
      <item>FilterReadPre</item>
      <item>FilterReadPost</item>
      <item>StdinReadPre</item>
      <item>StdinReadPost</item>
      <item>BufWrite</item>
      <item>BufWritePre</item>
      <item>BufWritePost</item>
      <item>BufWriteCmd</item>
      <item>FileWritePre</item>
      <item>FileWritePost</item>
      <item>FileWriteCmd</item>
      <item>FileAppendPre</item>
      <item>FileAppendPost</item>
      <item>FileAppendCmd</item>
      <item>FilterWritePre</item>
      <item>FilterWritePost</item>
      <item>BufAdd</item>
      <item>BufCreate</item>
      <item>BufDelete</item>
      <item>BufWipeout</item>
      <item>BufFilePre</item>
      <item>BufFilePost</item>
      <item>BufEnter</item>
      <item>BufLeave</item>
      <item>BufWinEnter</item>
      <item>BufWinLeave</item>
      <item>BufUnload</item>
      <item>BufHidden</item>
      <item>BufNew</item>
      <item>SwapExists</item>
      <item>FileType</item>
      <item>Syntax</item>
      <item>EncodingChanged</item>
      <item>TermChanged</item>
      <item>VimEnter</item>
      <item>GUIEnter</item>
      <item>TermResponse</item>
      <item>VimLeavePre</item>
      <item>VimLeave</item>
      <item>FileChangedShell</item>
      <item>FileChangedShellPost</item>
      <item>FileChangedRO</item>
      <item>ShellCmdPost</item>
      <item>ShellFilterPost</item>
      <item>FuncUndefined</item>
      <item>SpellFileMissing</item>
      <item>SourcePre</item>
      <item>SourceCmd</item>
      <item>VimResized</item>
      <item>FocusGained</item>
      <item>FocusLost</item>
      <item>CursorHold</item>
      <item>CursorHoldI</item>
      <item>CursorMoved</item>
      <item>CursorMovedI</item>
      <item>WinEnter</item>
      <item>WinLeave</item>
      <item>TabEnter</item>
      <item>TabLeave</item>
      <item>CmdwinEnter</item>
      <item>CmdwinLeave</item>
      <item>InsertEnter</item>
      <item>InsertChange</item>
      <item>InsertLeave</item>
      <item>ColorScheme</item>
      <item>RemoteReply</item>
      <item>QuickFixCmdPre</item>
      <item>QuickFixCmdPost</item>
      <item>SessionLoadPost</item>
      <item>MenuPopup</item>
      <item>User</item>
    </list>
    <list name="options">
      <item>aleph</item>
      <item>allowrevins</item>
      <item>altkeymap</item>
      <item>ambiwidth</item>
      <item>antialias</item>
      <item>autochdir</item>
      <item>arabic</item>
      <item>arabicshape</item>
      <item>autoindent</item>
      <item>autoread</item>
      <item>autowrite</item>
      <item>autowriteall</item>
      <item>background</item>
      <item>backspace</item>
      <item>backup</item>
      <item>backupcopy</item>
      <item>backupdir</item>
      <item>backupext</item>
      <item>backupskip</item>
      <item>balloondelay</item>
      <item>ballooneval</item>
      <item>balloonexpr</item>
      <item>binary</item>
      <item>bioskey</item>
      <item>bomb</item>
      <item>breakat</item>
      <item>browsedir</item>
      <item>bufhidden</item>
      <item>buflisted</item>
      <item>buftype</item>
      <item>casemap</item>
      <item>cdpath</item>
      <item>cedit</item>
      <item>charconvert</item>
      <item>cindent</item>
      <item>cinkeys</item>
      <item>cinoptions</item>
      <item>cinwords</item>
      <item>clipboard</item>
      <item>cmdheight</item>
      <item>cmdwinheight</item>
      <item>colorcolumn</item>
      <item>columns</item>
      <item>comments</item>
      <item>commentstring</item>
      <item>compatible</item>
      <item>complete</item>
      <item>completefunc</item>
      <item>completeopt</item>
      <item>concealcursor</item>
      <item>conceallevel</item>
      <item>confirm</item>
      <item>conskey</item>
      <item>copyindent</item>
      <item>cpoptions</item>
      <item>cryptmethod</item>
      <item>cscopepathcomp</item>
      <item>cscopeprg</item>
      <item>cscopequickfix</item>
      <item>cscopetag</item>
      <item>cscopetagorder</item>
      <item>cscopeverbose</item>
      <item>cursorbind</item>
      <item>cursorcolumn</item>
      <item>cursorline</item>
      <item>debug</item>
      <item>define</item>
      <item>delcombine</item>
      <item>dictionary</item>
      <item>diff</item>
      <item>diffexpr</item>
      <item>diffopt</item>
      <item>digraph</item>
      <item>directory</item>
      <item>display</item>
      <item>eadirection</item>
      <item>edcompatible</item>
      <item>encoding</item>
      <item>endofline</item>
      <item>equalalways</item>
      <item>equalprg</item>
      <item>errorbells</item>
      <item>errorfile</item>
      <item>errorformat</item>
      <item>esckeys</item>
      <item>eventignore</item>
      <item>expandtab</item>
      <item>exrc</item>
      <item>fileencoding</item>
      <item>fileencodings</item>
      <item>fileformat</item>
      <item>fileformats</item>
      <item>filetype</item>
      <item>fillchars</item>
      <item>fkmap</item>
      <item>foldclose</item>
      <item>foldcolumn</item>
      <item>foldenable</item>
      <item>foldexpr</item>
      <item>foldignore</item>
      <item>foldlevel</item>
      <item>foldlevelstart</item>
      <item>foldmarker</item>
      <item>foldmethod</item>
      <item>foldminlines</item>
      <item>foldnestmax</item>
      <item>foldopen</item>
      <item>foldtext</item>
      <item>formatlistpat</item>
      <item>formatoptions</item>
      <item>formatprg</item>
      <item>formatexpr</item>
      <item>fsync</item>
      <item>gdefault</item>
      <item>grepformat</item>
      <item>grepprg</item>
      <item>guicursor</item>
      <item>guifont</item>
      <item>guifontset</item>
      <item>guifontwide</item>
      <item>guiheadroom</item>
      <item>guioptions</item>
      <item>guipty</item>
      <item>guitablabel</item>
      <item>guitabtooltip</item>
      <item>helpfile</item>
      <item>helpheight</item>
      <item>helplang</item>
      <item>hidden</item>
      <item>highlight</item>
      <item>hlsearch</item>
      <item>history</item>
      <item>hkmap</item>
      <item>hkmapp</item>
      <item>icon</item>
      <item>iconstring</item>
      <item>ignorecase</item>
      <item>imactivatekey</item>
      <item>imcmdline</item>
      <item>imdisable</item>
      <item>iminsert</item>
      <item>imsearch</item>
      <item>include</item>
      <item>includeexpr</item>
      <item>incsearch</item>
      <item>indentexpr</item>
      <item>indentkeys</item>
      <item>infercase</item>
      <item>insertmode</item>
      <item>isfname</item>
      <item>isident</item>
      <item>iskeyword</item>
      <item>isprint</item>
      <item>joinspaces</item>
      <item>key</item>
      <item>keymap</item>
      <item>keymodel</item>
      <item>keywordprg</item>
      <item>langmap</item>
      <item>langmenu</item>
      <item>laststatus</item>
      <item>lazyredraw</item>
      <item>linebreak</item>
      <item>lines</item>
      <item>linespace</item>
      <item>lisp</item>
      <item>lispwords</item>
      <item>list</item>
      <item>listchars</item>
      <item>loadplugins</item>
      <item>macatsui</item>
      <item>magic</item>
      <item>makeef</item>
      <item>makeprg</item>
      <item>matchpairs</item>
      <item>matchtime</item>
      <item>maxcombine</item>
      <item>maxfuncdepth</item>
      <item>maxmapdepth</item>
      <item>maxmem</item>
      <item>maxmempattern</item>
      <item>maxmemtot</item>
      <item>menuitems</item>
      <item>mkspellmem</item>
      <item>modeline</item>
      <item>modelines</item>
      <item>modifiable</item>
      <item>modified</item>
      <item>more</item>
      <item>mouse</item>
      <item>mousefocus</item>
      <item>mousehide</item>
      <item>mousemodel</item>
      <item>mouseshape</item>
      <item>mousetime</item>
      <item>mzquantum</item>
      <item>nrformats</item>
      <item>number</item>
      <item>numberwidth</item>
      <item>omnifunc</item>
      <item>opendevice</item>
      <item>operatorfunc</item>
      <item>osfiletype</item>
      <item>paragraphs</item>
      <item>paste</item>
      <item>pastetoggle</item>
      <item>patchexpr</item>
      <item>patchmode</item>
      <item>path</item>
      <item>preserveindent</item>
      <item>previewheight</item>
      <item>previewwindow</item>
      <item>printdevice</item>
      <item>printencoding</item>
      <item>printexpr</item>
      <item>printfont</item>
      <item>printheader</item>
      <item>printmbcharset</item>
      <item>printmbfont</item>
      <item>printoptions</item>
      <item>pumheight</item>
      <item>quoteescape</item>
      <item>readonly</item>
      <item>redrawtime</item>
      <item>relativenumber</item>
      <item>remap</item>
      <item>report</item>
      <item>restorescreen</item>
      <item>revins</item>
      <item>rightleft</item>
      <item>rightleftcmd</item>
      <item>ruler</item>
      <item>rulerformat</item>
      <item>runtimepath</item>
      <item>scroll</item>
      <item>scrollbind</item>
      <item>scrolljump</item>
      <item>scrolloff</item>
      <item>scrollopt</item>
      <item>sections</item>
      <item>secure</item>
      <item>selection</item>
      <item>selectmode</item>
      <item>sessionoptions</item>
      <item>shell</item>
      <item>shellcmdflag</item>
      <item>shellpipe</item>
      <item>shellquote</item>
      <item>shellredir</item>
      <item>shellslash</item>
      <item>shelltemp</item>
      <item>shelltype</item>
      <item>shellxquote</item>
      <item>shiftround</item>
      <item>shiftwidth</item>
      <item>shortmess</item>
      <item>shortname</item>
      <item>showbreak</item>
      <item>showcmd</item>
      <item>showfulltag</item>
      <item>showmatch</item>
      <item>showmode</item>
      <item>showtabline</item>
      <item>sidescroll</item>
      <item>sidescrolloff</item>
      <item>smartcase</item>
      <item>smartindent</item>
      <item>smarttab</item>
      <item>softtabstop</item>
      <item>spell</item>
      <item>spellcapcheck</item>
      <item>spellfile</item>
      <item>spelllang</item>
      <item>spellsuggest</item>
      <item>splitbelow</item>
      <item>splitright</item>
      <item>startofline</item>
      <item>statusline</item>
      <item>suffixes</item>
      <item>suffixesadd</item>
      <item>swapfile</item>
      <item>swapsync</item>
      <item>switchbuf</item>
      <item>synmaxcol</item>
      <item>syntax</item>
      <item>tabstop</item>
      <item>tabline</item>
      <item>tabpagemax</item>
      <item>tagbsearch</item>
      <item>taglength</item>
      <item>tagrelative</item>
      <item>tags</item>
      <item>tagstack</item>
      <item>term</item>
      <item>termbidi</item>
      <item>termencoding</item>
      <item>terse</item>
      <item>textauto</item>
      <item>textmode</item>
      <item>textwidth</item>
      <item>thesaurus</item>
      <item>tildeop</item>
      <item>timeout</item>
      <item>timeoutlen</item>
      <item>title</item>
      <item>titlelen</item>
      <item>titleold</item>
      <item>titlestring</item>
      <item>toolbar</item>
      <item>toolbariconsize</item>
      <item>ttimeout</item>
      <item>ttimeoutlen</item>
      <item>ttybuiltin</item>
      <item>ttyfast</item>
      <item>ttymouse</item>
      <item>ttyscroll</item>
      <item>ttytype</item>
      <item>undodir</item>
      <item>undofile</item>
      <item>undolevels</item>
      <item>undoreload</item>
      <item>updatecount</item>
      <item>updatetime</item>
      <item>verbose</item>
      <item>verbosefile</item>
      <item>viewdir</item>
      <item>viewoptions</item>
      <item>viminfo</item>
      <item>virtualedit</item>
      <item>visualbell</item>
      <item>warn</item>
      <item>weirdinvert</item>
      <item>whichwrap</item>
      <item>wildchar</item>
      <item>wildcharm</item>
      <item>wildignore</item>
      <item>wildignorecase</item>
      <item>wildmenu</item>
      <item>wildmode</item>
      <item>wildoptions</item>
      <item>winaltkeys</item>
      <item>window</item>
      <item>winheight</item>
      <item>winfixheight</item>
      <item>winfixwidth</item>
      <item>winminheight</item>
      <item>winminwidth</item>
      <item>winwidth</item>
      <item>wrap</item>
      <item>wrapmargin</item>
      <item>wrapscan</item>
      <item>write</item>
      <item>writeany</item>
      <item>writebackup</item>
      <item>writedelay</item>
    </list>
    <list name="functions">
      <item>abs</item>
      <item>acos</item>
      <item>add</item>
      <item>append</item>
      <item>argc</item>
      <item>argidx</item>
      <item>argv</item>
      <item>argv</item>
      <item>asin</item>
      <item>atan</item>
      <item>atan2</item>
      <item>browse</item>
      <item>browsedir</item>
      <item>bufexists</item>
      <item>buflisted</item>
      <item>bufloaded</item>
      <item>bufname</item>
      <item>bufnr</item>
      <item>bufwinnr</item>
      <item>byte2line</item>
      <item>byteidx</item>
      <item>call</item>
      <item>ceil</item>
      <item>changenr</item>
      <item>char2nr</item>
      <item>cindent</item>
      <item>clearmatches</item>
      <item>col</item>
      <item>complete</item>
      <item>complete_add</item>
      <item>complete_check</item>
      <item>confirm</item>
      <item>copy</item>
      <item>cos</item>
      <item>cosh</item>
      <item>count</item>
      <item>cscope_connection</item>
      <item>cursor</item>
      <item>deepcopy</item>
      <item>delete</item>
      <item>did_filetype</item>
      <item>diff_filler</item>
      <item>diff_hlID</item>
      <item>empty</item>
      <item>escape</item>
      <item>eval</item>
      <item>eventhandler</item>
      <item>executable</item>
      <item>exists</item>
      <item>extend</item>
      <item>exp</item>
      <item>expand</item>
      <item>feedkeys</item>
      <item>filereadable</item>
      <item>filewritable</item>
      <item>filter</item>
      <item>finddir</item>
      <item>findfile</item>
      <item>float2nr</item>
      <item>floor</item>
      <item>fmod</item>
      <item>fnameescape</item>
      <item>fnamemodify</item>
      <item>foldclosed</item>
      <item>foldclosedend</item>
      <item>foldlevel</item>
      <item>foldtext</item>
      <item>foldtextresult</item>
      <item>foreground</item>
      <item>function</item>
      <item>garbagecollect</item>
      <item>get</item>
      <item>getbufline</item>
      <item>getbufvar</item>
      <item>getchar</item>
      <item>getcharmod</item>
      <item>getcmdline</item>
      <item>getcmdpos</item>
      <item>getcmdtype</item>
      <item>getcwd</item>
      <item>getfperm</item>
      <item>getfsize</item>
      <item>getfontname</item>
      <item>getftime</item>
      <item>getftype</item>
      <item>getline</item>
      <item>getline</item>
      <item>getloclist</item>
      <item>getmatches</item>
      <item>getpid</item>
      <item>getpos</item>
      <item>getqflist</item>
      <item>getreg</item>
      <item>getregtype</item>
      <item>gettabvar</item>
      <item>gettabwinvar</item>
      <item>getwinposx</item>
      <item>getwinposy</item>
      <item>getwinvar</item>
      <item>glob</item>
      <item>globpath</item>
      <item>has</item>
      <item>has_key</item>
      <item>haslocaldir</item>
      <item>hasmapto</item>
      <item>histadd</item>
      <item>histdel</item>
      <item>histget</item>
      <item>histnr</item>
      <item>hlexists</item>
      <item>hlID</item>
      <item>hostname</item>
      <item>iconv</item>
      <item>indent</item>
      <item>index</item>
      <item>input</item>
      <item>inputdialog</item>
      <item>inputlist</item>
      <item>inputrestore</item>
      <item>inputsave</item>
      <item>inputsecret</item>
      <item>insert</item>
      <item>isdirectory</item>
      <item>islocked</item>
      <item>items</item>
      <item>join</item>
      <item>keys</item>
      <item>len</item>
      <item>libcall</item>
      <item>libcallnr</item>
      <item>line</item>
      <item>line2byte</item>
      <item>lispindent</item>
      <item>localtime</item>
      <item>log</item>
      <item>log10</item>
      <item>map</item>
      <item>maparg</item>
      <item>mapcheck</item>
      <item>match</item>
      <item>matchadd</item>
      <item>matcharg</item>
      <item>matchdelete</item>
      <item>matchend</item>
      <item>matchlist</item>
      <item>matchstr</item>
      <item>max</item>
      <item>min</item>
      <item>mkdir</item>
      <item>mode</item>
      <item>mzeval</item>
      <item>nextnonblank</item>
      <item>nr2char</item>
      <item>pathshorten</item>
      <item>pow</item>
      <item>prevnonblank</item>
      <item>printf</item>
      <item>pumvisible</item>
      <item>range</item>
      <item>readfile</item>
      <item>reltime</item>
      <item>reltimestr</item>
      <item>remote_expr</item>
      <item>remote_foreground</item>
      <item>remote_peek</item>
      <item>remote_read</item>
      <item>remote_send</item>
      <item>remove</item>
      <item>rename</item>
      <item>repeat</item>
      <item>resolve</item>
      <item>reverse</item>
      <item>round</item>
      <item>search</item>
      <item>searchdecl</item>
      <item>searchpair</item>
      <item>searchpairpos</item>
      <item>searchpos</item>
      <item>server2client</item>
      <item>serverlist</item>
      <item>setbufvar</item>
      <item>setcmdpos</item>
      <item>setline</item>
      <item>setloclist</item>
      <item>setmatches</item>
      <item>setpos</item>
      <item>setqflist</item>
      <item>setreg</item>
      <item>settabvar</item>
      <item>settabwinvar</item>
      <item>setwinvar</item>
      <item>shellescape</item>
      <item>simplify</item>
      <item>sin</item>
      <item>sinh</item>
      <item>sort</item>
      <item>soundfold</item>
      <item>spellbadword</item>
      <item>spellsuggest</item>
      <item>split</item>
      <item>sqrt</item>
      <item>str2float</item>
      <item>str2nr</item>
      <item>strchars</item>
      <item>strdisplaywidth</item>
      <item>strftime</item>
      <item>stridx</item>
      <item>string</item>
      <item>strlen</item>
      <item>strpart</item>
      <item>strridx</item>
      <item>strtrans</item>
      <item>strwidth</item>
      <item>submatch</item>
      <item>substitute</item>
      <item>synID</item>
      <item>synIDattr</item>
      <item>synIDtrans</item>
      <item>synconcealed</item>
      <item>synstack</item>
      <item>system</item>
      <item>tabpagebuflist</item>
      <item>tabpagenr</item>
      <item>tabpagewinnr</item>
      <item>taglist</item>
      <item>tagfiles</item>
      <item>tempname</item>
      <item>tan</item>
      <item>tanh</item>
      <item>tolower</item>
      <item>toupper</item>
      <item>tr</item>
      <item>trunc</item>
      <item>type</item>
      <item>undofile</item>
      <item>undotree</item>
      <item>values</item>
      <item>virtcol</item>
      <item>visualmode</item>
      <item>winbufnr</item>
      <item>wincol</item>
      <item>winheight</item>
      <item>winline</item>
      <item>winnr</item>
      <item>winrestcmd</item>
      <item>winrestview</item>
      <item>winsaveview</item>
      <item>winwidth</item>
      <item>writefile</item>
    </list>
    <list name="completions">
      <item>augroup</item>
      <item>buffer</item>
      <item>command</item>
      <item>cscope</item>
      <item>dir</item>
      <item>environment</item>
      <item>event</item>
      <item>expression</item>
      <item>file</item>
      <item>filetype</item>
      <item>function</item>
      <item>help</item>
      <item>highlight</item>
      <item>mapping</item>
      <item>menu</item>
      <item>option</item>
      <item>shellcmd</item>
      <item>sign</item>
      <item>syntax</item>
      <item>tag</item>
      <item>tag</item>
      <item>var</item>
    </list>
    <contexts>
      <!-- Start of a new command -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="exCommand" fallthrough="true" fallthroughContext="#pop!genericCommand">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <!-- When at the exCommand level, skip over continuation characters -->
        <DetectChar attribute="Operator" char="\" firstNonSpace="true"/>
        <!-- Start of line comment. -->
        <DetectChar attribute="Comment" context="comment" char="&quot;" firstNonSpace="true"/>
        <!-- Shebang -->
        <Detect2Chars attribute="Comment" context="comment" char="#" char1="!" firstNonSpace="true"/>
        <DetectChar attribute="Operator" context="#pop!exCommandRange" char=":"/>
        <IncludeRules context="exCommandHead"/>
      </context>
      <context attribute="Normal Text" name="exCommandRange" lineEndContext="#pop#pop" fallthrough="true" fallthroughContext="#pop!exCommandHead">
        <RegExpr attribute="Normal Text" context="#pop!exCommandHead" String="%|(\d+|\.|\$)([+-]\d*)?([,;](\d+|\.|\$)([+-]\d*)?)?:?"/>
      </context>
      <context attribute="Normal Text" name="exCommandHead" lineEndContext="#pop#pop" fallthrough="true" fallthroughContext="#pop!genericCommand">
        <WordDetect attribute="Keyword" context="genericCommand" String="function" beginRegion="block"/>
        <WordDetect attribute="Keyword" context="genericCommand" String="endfunction" endRegion="block"/>
        <keyword attribute="Flow" context="genericCommand" String="beginBlockFlow" beginRegion="block"/>
        <WordDetect attribute="Flow" context="#pop!forCommand" String="for" beginRegion="block"/>
        <keyword attribute="Flow" context="#pop!simpleCommand" String="endBlockFlow" endRegion="block"/>
        <keyword attribute="Flow" context="#pop!simpleCommand" String="flow"/>
        <WordDetect attribute="Flow" context="#pop!exprCommand" String="while" beginRegion="block"/>
        <WordDetect attribute="Flow" context="#pop!exprCommand" String="if" beginRegion="block"/>
        <WordDetect attribute="Flow" context="#pop!exprCommand" String="elseif" />
        <WordDetect attribute="Flow" context="#pop!exprCommand" String="return" />
        <Detect2Chars attribute="BuiltInCommand" context="#pop!simpleCommand" char="!" char1="!"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!externalCommand" char="!"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="#"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="&amp;"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="*"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="&lt;"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="="/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="&gt;"/>
        <Detect2Chars attribute="BuiltInCommand" context="#pop!simpleCommand" char="@" char1="@"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="@"/>
        <DetectChar attribute="BuiltInCommand" context="#pop!simpleCommand" char="~"/>
        <keyword attribute="BuiltInCommand" context="#pop!simpleCommand" String="simpleCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!fileBufferCommand" String="fileBufferCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!lineCommand" String="lineCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!mapCommand" String="mapCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!menuCommand" String="menuCommands"/>
        <WordDetect attribute="BuiltInCommand" context="#pop!autoCommand" String="autocmd"/>
        <WordDetect attribute="BuiltInCommand" context="#pop!customCommand" String="command"/>
        <!-- Two simple commands to get consistent highlighting -->
        <WordDetect attribute="BuiltInCommand" context="#pop!delCommand" String="delcommand"/>
        <WordDetect attribute="BuiltInCommand" context="#pop!delFunction" String="delfunction"/>
        <!--
        These commands take a command as their single argument and execute it.
        Because of this we can simply pop back to the top level immediately.
        -->
        <keyword attribute="BuiltInCommand" context="#pop!exCommand" String="commandCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!exprCommand" String="exprCommands"/>
        <WordDetect attribute="BuiltInCommand" context="#pop!callCommand" String="call"/>
        <!-- Catch is control flow and a catch command. -->
        <WordDetect attribute="Flow" context="#pop!patternCommand" String="catch"/>
        <keyword attribute="BuiltInCommand" context="#pop!patternCommand" String="patternCommands"/>
        <keyword attribute="BuiltInCommand" context="#pop!externalCommand" String="externalCommand"/>
        <keyword attribute="BuiltInCommand" context="#pop!genericCommand" String="builtInCommand"/>
        <RegExpr attribute="UserCommand" context="#pop!genericCommand" String="[A-Z][a-zA-Z_0-9]*"/>
      </context>
      <!-- BEGIN Commands -->
      <!--
      A simple command. Commands that take their arguments varbatim, have no expressions
      nor patterns. Comments work. Often these commands have no or few arguments
      -->
      <context attribute="Normal Text" name="simpleCommand" lineEndContext="continuationCheck">
        <IncludeRules context="hasComment"/>
        <IncludeRules context="hasBar"/>
      </context>
      <!--
      A register command. A step above (or below) the simple command these commands
      cannot except comments because " is for registers
      -->
      <context attribute="Normal Text" name="simpleCommand" lineEndContext="continuationCheck">
        <IncludeRules context="hasBar"/>
      </context>
      <!--
      A for command. The for command has a binding section and a list expression
      part
      -->
      <context attribute="Normal Text" name="forCommand" lineEndContext="continuationCheck"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <DetectChar attribute="Normal Text" context="#pop!forVarList" char="[" />
        <RegExpr attribute="Variable" context="#pop!forIn" String="([bwtglsav]:)?[a-zA-Z_0-9]+" />
      </context>
      <context attribute="Normal Text" name="forVarList" lineEndContext="continuationCheck"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <DetectChar attribute="Normal Text" context="#stay" char="," />
        <DetectChar attribute="Normal Text" context="#pop!forIn" char="]" />
        <RegExpr attribute="Variable" context="#stay" String="([bwtglsav]:)?[a-zA-Z_0-9]+" />
      </context>
      <context attribute="Normal Text" name="forIn" lineEndContext="continuationCheck"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <WordDetect attribute="Flow" context="#pop!exprCommand" String="in" />
      </context>
      <!--
      File buffer command. This will provide option highlighting for options and + commands
      over simpleCommand. No additional highlighting will be done over the embedded command
      strings. Instead a special string will be constructed out of the connected components
      -->
      <context attribute="Normal Text" name="fileBufferCommand" lineEndContext="#pop">
        <IncludeRules context="simpleCommand"/>
        <keyword attribute="Option" context="#stay" String="fileBufferOptions"/>
        <Detect2Chars attribute="Operator" context="" char="+" char1="+"/>
        <DetectChar attribute="Operator" context="value" char="+"/>
        <DetectChar attribute="Operator" context="shortValue" char="="/>
      </context>
      <!--
      A line command  causes the next lines to be interpreted as verbatim strings.
      Does not support bars, though they do work in vim. The reason for this is
      that to support them for most rules a new similar rule which does not
      do the continuationCheck at line end would have to be created
      -->
      <context attribute="Normal Text" lineEndContext="lineMode" name="lineCommand">
        <IncludeRules context="hasComment"/>
      </context>
      <!-- Line mode in which the user enters lines which are translated as verbatim strings until a line with only a dot is encountered -->
      <context attribute="VerbatimString" name="lineMode" lineEndContext="#stay">
        <RegExpr attribute="Keyword" context="#pop#pop" String="^\.$"/>
      </context>
      <!--
      An expression command. This type of command takes a lone expression as its
      parameter. Comments do not work.
      -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="exprCommand">
        <IncludeRules context="hasBar"/>
        <IncludeRules context="expression"/>
      </context>
      <!--
      A pattern command. This type of command takes a lone pattern as its
      parameter.
      -->
      <context attribute="String" lineEndContext="continuationCheck" name="patternCommand" fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <RegExpr attribute="Pattern" context="#pop!simpleCommand" String="&pattern;"/>
      </context>
      <!--
      A menu command. A special kind of map command that takes a menu item identifier
      first.
      -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="menuCommand" fallthrough="true" fallthroughContext="#pop!menuItem">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <keyword attribute="EscapeSequence" context="#stay" String="mapOptions"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="menuItem" fallthrough="true" fallthroughContext="#pop!valueMapLHS">
        <IncludeRules context="value"/>
      </context>
      <!--
      A map command. These commands all take a list of flags (map being
      the most extensive one), followed by a lhs value and a rhs tail.
      Depending on the <expr> flags the tail will be an expression or
      a value
      -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="mapCommand" fallthrough="true" fallthroughContext="#pop!valueMapLHS">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <WordDetect attribute="EscapeSequence" context="#pop!exprMapCommand" String="&lt;expr&gt;"/>
        <keyword attribute="EscapeSequence" context="#stay" String="mapOptions"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="valueMapLHS">
        <DetectSpaces attribute="Normal Text" context="#pop!mapValue"/>
        <IncludeRules context="keySequence"/>
      </context>
      <!-- For the remainder of the map value command no special highlighting will occur -->
      <context attribute="Value" lineEndContext="continuationCheck" name="mapValue">
        <IncludeRules context="keySequence"/>
        <IncludeRules context="hasBar"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="exprMapCommand" fallthrough="true" fallthroughContext="#pop!expressionMapLHS">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <keyword attribute="EscapeSequence" context="#stay" String="mapOptions"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="expressionMapLHS">
        <!-- Now that all arguments are processed the command behaves as an exprCommand -->
        <DetectSpaces attribute="Normal Text" context="#pop!exprCommand"/>
        <IncludeRules context="keySequence"/>
      </context>
      <!--
      A special case for call. Similar to the exprCommand, but this checks that the
      top level element is a function call. It does no further validation beyond that
      -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="callCommand" fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <RegExpr attribute="Normal Text" context="#pop!exprCommand" String="[[a-zA-Z_0-9]+\(" lookAhead="true"/>
      </context>
      <!-- A specific rule for autocmd. It takes a command, but not immediately. -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="autoCommand">
        <keyword attribute="Event" context="#pop!autoCommandEvents" String="events"/>
        <DetectIdentifier attribute="Normal Text" context="#stay"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="autoCommandEvents">
        <DetectSpaces attribute="Normal Text" context="#pop!autoCommandBufferLocal"/>
        <keyword attribute="Event" context="#pop!autoCommandEvents" String="events"/>
        <DetectChar attribute="Normal Text" context="#stay" char=","/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="autoCommandBufferLocal" fallthrough="true" fallthroughContext="#pop!autoCommandFilePattern">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <RegExpr attribute="EscapeSequence" context="#pop!exCommand" String="\&lt;buffer(=(\d+|abuf))?\&gt;"/>
      </context>
      <context attribute="FilePattern" lineEndContext="continuationCheck" name="autoCommandFilePattern">
        <DetectSpaces attribute="Normal Text" context="#pop!nestedAutoCommand"/>
        <Detect2Chars attribute="SpecialChar" context="#stay" char="\" char1="\"/>
        <Detect2Chars attribute="SpecialChar" context="#stay" char="\" char1=" "/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="nestedAutoCommand" fallthrough="true" fallthroughContext="#pop!exCommand">
        <WordDetect attribute="Flag" context="#pop!exCommand" String="nested"/>
      </context>
      <!-- The command command. This defines a new user command. Has a nice list of attributes to go with it -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="customCommand"
               fallthrough="true" fallthroughContext="#pop!customCommandName">
        <!-- First deal with the exclamation point. This because we want to scan for arguments -->
        <DetectChar attribute="Normal Text" context="#stay" char="!"/>
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <DetectChar attribute="Normal Text" context="commandAttribute" char="-"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="customCommandName"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <RegExpr attribute="UserCommand" context="#pop!exCommand" String="[A-Z][a-zA-Z_0-9]*" />
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="commandAttribute" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <WordDetect attribute="Option" context="#pop!nargsAttribute" String="nargs"/>
        <WordDetect attribute="Option" context="#pop!completeAttribute" String="complete"/>
        <WordDetect attribute="Option" context="#pop!rangeAttribute" String="range"/>
        <WordDetect attribute="Option" context="#pop!countAttribute" String="count"/>
        <WordDetect attribute="Option" context="#pop" String="bang"/>
        <WordDetect attribute="Option" context="#pop" String="bar"/>
        <WordDetect attribute="Option" context="#pop" String="register"/>
        <WordDetect attribute="Option" context="#pop" String="buffer"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="nargsAttribute" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <DetectChar attribute="Operator" context="#pop!nargsAttributeValue" char="="/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="nargsAttributeValue" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <DetectChar attribute="Number" context="#pop" char="0"/>
        <DetectChar attribute="Number" context="#pop" char="1"/>
        <DetectChar attribute="Value" context="#pop" char="*"/>
        <DetectChar attribute="Value" context="#pop" char="?"/>
        <DetectChar attribute="Value" context="#pop" char="+"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="completeAttribute" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <DetectChar attribute="Operator" context="#pop!completeAttributeValue" char="="/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="completeAttributeValue" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <keyword attribute="BuiltInValue" context="#pop" String="completions"/>
        <WordDetect attribute="BuiltInValue" context="#pop!customCompletion" String="custom"/>
        <WordDetect attribute="BuiltInValue" context="#pop!customCompletion" String="customlist"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="customCompletion" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <DetectChar attribute="Operator" context="#pop!customCompletionFunction" char=","/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="customCompletionFunction" fallthrough="true" fallthroughContext="#pop#pop!syntaxError">
        <keyword attribute="BuiltInFunction" context="#pop" String="functions"/>
        <RegExpr attribute="UserFunction" context="#pop" String="([A-Z]|s:)[a-zA-Z_0-9]+"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="rangeAttribute" fallthrough="true" fallthroughContext="syntaxError">
        <DetectSpaces attribute="Normal Text" context="#pop"/>
        <DetectChar attribute="Operator" context="#pop!rangeAttributeValue" char="="/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="rangeAttributeValue" fallthrough="true" fallthroughContext="syntaxError">
        <DetectChar attribute="Value" context="#pop" char="%" />
        <RegExpr attribute="Number" context="#pop" String="[1-9][0-9]+" />
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="countAttribute" fallthrough="true" fallthroughContext="syntaxError">
        <DetectSpaces attribute="Normal Text" context="#pop"/>
        <DetectChar attribute="Operator" context="#pop!countAttributeValue" char="="/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="countAttributeValue" fallthrough="true" fallthroughContext="syntaxError">
        <RegExpr attribute="Number" context="#pop" String="[1-9][0-9]+" />
      </context>
      <!-- Simple commands that need highlighting of user functions and commands -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="delFunction"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <RegExpr attribute="UserFunction" context="#pop!simpleCommand" String="([A-Z]|s:)[a-zA-Z_0-9]+"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="delCommand"
               fallthrough="true" fallthroughContext="#pop!syntaxError">
        <DetectSpaces attribute="Normal Text" context="#stay" />
        <RegExpr attribute="UserCommand" context="#pop!simpleCommand" String="[A-Z][a-zA-Z_0-9]*" />
      </context>
      <!--
      A generic command. Strings and numbers will be detected and comments are allowed.
      This does not nearly behave as an expression command. The reason for this is that
      it would mark things that are nothing of the sort as a variable. This command
      type will require the user to understand the command in question.
      Depending on the command in question this might or might not be the correct
      interpretation. Bars work.
      -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="genericCommand">
        <keyword attribute="Event" context="#stay" String="events"/>
        <keyword attribute="Option" context="#stay" String="options"/>
        <keyword attribute="EscapeSequence" context="#stay" String="userCommandEscapeSequences"/>
        <keyword attribute="EscapeSequence" context="#stay" String="mapOptions"/>
        <HlCOct attribute="OctalNumber" context="#stay"/>
        <HlCHex attribute="HexNumber" context="#stay"/>
        <Float attribute="Number" context="#stay"/>
        <Int attribute="Number" context="#stay"/>
        <RegExpr attribute="Operator" context="#stay" String="\\( |(#([0-9]|#|&lt;[1-9])))"/>
        <RegExpr attribute="VerbatimString" context="#stay" String="'(''|[^'])*'"/>
        <RegExpr attribute="String" context="#stay" String="&quot;(\\.|[^&quot;\\])*&quot;"/>
        <IncludeRules context="hasBar"/>
        <IncludeRules context="hasComment"/>
      </context>
      <!--
      An external command. Everything is taken verbatim except !. Line continuation also behaves
      differently
      -->
      <context attribute="Normal Text" lineEndContext="#pop" name="externalCommand">
        <RegExpr attribute="Normal Text" context="#stay" String="\\[\!]"/>
        <DetectChar attribute="EscapeSequence" context="#stay" char="!"/>
        <LineContinue attribute="CommandDelimiter" context="#stay" char="\"/>
      </context>
      <!-- END -->
      <!-- Rule that allows commands to continue over the next line -->
      <context attribute="Normal Text" lineEndContext="#stay" name="continuationCheck" fallthrough="true" fallthroughContext="#pop#pop">
        <DetectSpaces attribute="Normal Text" context="#stay"/>
        <DetectChar attribute="CommandDelimiter" context="#pop" char="\" firstNonSpace="true"/>
      </context>
      <!-- BEGIN Special syntactic constructs -->
      <!-- Comment -->
      <context attribute="Comment" lineEndContext="#pop" name="comment">
        <keyword attribute="Alert" context="#stay" String="tasks"/>
      </context>
      <!--
      A Short value. A short value is a sequence of characters without spaces
      -->
      <context attribute="Value" lineEndContext="#pop" name="shortValue">
        <!-- Escape the value when a space is reached -->
        <DetectChar attribute="Normal Text" context="#pop" char=" "/>
      </context>
      <!--
      A value. A value is like a short value, but allows spaces by escaping using \
      -->
      <context attribute="Value" lineEndContext="#pop" name="value">
        <IncludeRules context="shortValue"/>
        <!-- Allow backslashes to escape themselves and spaces -->
        <Detect2Chars attribute="SpecialChar" context="#stay" char="\" char1="\"/>
        <Detect2Chars attribute="SpecialChar" context="#stay" char="\" char1=" "/>
      </context>
      <!--
      A key sequence. This is a special type of value that is used where
      a representation of a sequence of keys for the user to press is
      expected or where a sequence of keys for vim to generate is
      expected.
      -->
      <context attribute="KeySequence" lineEndContext="continuationCheck" name="keySequence">
        <Detect2Chars attribute="KeySequence" context="#stay" char="\" char1="\"/>
        <Detect2Chars attribute="KeySequence" context="#stay" char="\" char1="&lt;"/>
        <WordDetect attribute="KeySequence" context="#stay" String="&lt;lt&gt;"/>
        <DetectChar attribute="KeyCode" context="keyCode" char="&lt;"/>
      </context>
      <!--
      Key codes. This matches various invalid sequences, but you can't have
      it all
      -->
      <context attribute="Normal Text" name="keyCode" lineEndContext="#pop">
        <DetectChar attribute="KeyCode" context="#pop" char="&gt;"/>
        <RegExpr attribute="SyntaxError" context="#pop" String="\S*[^&gt;](\s|$)"/>
        <RegExpr attribute="KeyCode" context="#stay" String="[^&gt;]+"/>
      </context>
      <!-- END -->
      <!-- BEGIN Rules that enable syntactic element detection in commands. To be included only. -->
      <!-- Comments -->
      <context attribute="Normal Text" name="hasComment" lineEndContext="continuationCheck">
        <DetectChar attribute="Comment" context="comment" char="&quot;"/>
      </context>
      <!-- Whether or not to consider a bar the start of a new command -->
      <context attribute="Normal Text" name="hasBar" lineEndContext="continuationCheck">
        <Detect2Chars attribute="Operator" context="#stay" char="\" char1="|"/>
        <DetectChar attribute="CommandDelimiter" context="#pop#pop" char="|"/>
      </context>
      <!-- Includes expression operators. -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="hasOperators">
        <DetectChar attribute="Operator" context="#stay" char="?"/>
        <DetectChar attribute="Operator" context="#stay" char=":"/>
        <Detect2Chars attribute="Operator" context="#stay" char="&amp;" char1="&amp;"/>
        <Detect2Chars attribute="Operator" context="#stay" char="|" char1="|"/>
        <RegExpr attribute="Operator" context="#stay" String="(=[=~]|![=~]?|[&lt;&gt;]=?)[?#]?"/>
        <RegExpr attribute="Keyword" context="#stay" String="\bis(not)?\b"/>
        <RegExpr attribute="Operator" context="#stay" String="[+.-]"/>
        <DetectChar attribute="Operator" context="curlys" char="{"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="curlys" fallthrough="true" fallthroughContext="#pop">
        <DetectChar attribute="Operator" context="curlys" char="}"/>
        <IncludeRules context="expression"/>
      </context>
      <!-- Expression highlighting. This makes most words variables and other things -->
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="expression" fallthrough="true" fallthroughContext="#pop">
        <HlCOct attribute="OctalNumber" context="#stay"/>
        <HlCHex attribute="HexNumber" context="#stay"/>
        <Float attribute="Number" context="#stay"/>
        <Int attribute="Number" context="#stay"/>
        <RegExpr attribute="VerbatimString" context="#stay" String="'(''|[^'])*'"/>
        <RegExpr attribute="String" context="#stay" String="&quot;(\\.|[^&quot;\\])*&quot;"/>
        <!-- Get highlighting of builtIns out of the way -->
        <keyword attribute="Option" context="#stay" String="options"/>
        <keyword attribute="BuiltInFunction" context="#stay" String="functions"/>
        <IncludeRules context="hasOperators"/>
        <RegExpr attribute="Normal Text" context="functionCall" lookAhead="true" String="([A-Z]|s:)[a-zA-Z_0-9]+\("/>
        <RegExpr attribute="Variable" context="#stay" String="([bwtglsav]:)?[a-zA-Z_0-9]+"/>
      </context>
      <context attribute="Normal Text" lineEndContext="continuationCheck" name="functionCall">
        <RegExpr attribute="UserFunction" context="#stay" String="([A-Z]|s:)[a-zA-Z_0-9]+"/>
        <DetectChar attribute="Operator" context="#pop" char="("/>
      </context>
      <!-- END -->
      <!-- BEGIN meta -->
      <context attribute="SyntaxError" lineEndContext="#pop" name="syntaxError"/>
      <!-- END meta -->
      <!-- <RegExpr attribute="SpecialChar" context="#stay" String="\\([0-7]{1,3}|(x|X)[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{1,8}|[befnrt\\&quot;]|&lt;([a-zA-Z0-9_-])*&gt;)" /> -->
    </contexts>
    <itemDatas>
      <itemData name="Normal Text" defStyleNum="dsNormal"/>
      <itemData name="Keyword" defStyleNum="dsKeyword"/>
      <itemData name="CommandDelimiter" defStyleNum="dsBuiltIn"/>
      <itemData name="Operator" defStyleNum="dsOperator"/>
      <itemData name="Comment" defStyleNum="dsComment"/>
      <itemData name="BuiltInCommand" defStyleNum="dsBuiltIn"/>
      <itemData name="BuiltInFunction" defStyleNum="dsBuiltIn"/>
      <itemData name="UserFunction" defStyleNum="dsFunction"/>
      <itemData name="UserCommand" defStyleNum="dsFunction"/>
      <itemData name="Alert" defStyleNum="dsAlert"/>
      <itemData name="String" defStyleNum="dsString"/>
      <itemData name="KeyCode" defStyleNum="dsSpecialChar"/>
      <itemData name="SpecialChar" defStyleNum="dsSpecialChar"/>
      <itemData name="Value" defStyleNum="dsNormal"/>
      <itemData name="FilePattern" defStyleNum="dsNormal"/>
      <itemData name="KeySequence" defStyleNum="dsNormal"/>
      <itemData name="VerbatimString" defStyleNum="dsVerbatimString"/>
      <itemData name="Pattern" defStyleNum="dsSpecialString"/>
      <itemData name="Flow" defStyleNum="dsControlFlow"/>
      <itemData name="Event" defStyleNum="dsOthers"/>
      <itemData name="Flag" defStyleNum="dsOthers"/>
      <itemData name="BuiltInValue" defStyleNum="dsOthers"/>
      <itemData name="EscapeSequence" defStyleNum="dsSpecialChar"/>
      <itemData name="Option" defStyleNum="dsVariable"/>
      <itemData name="Variable" defStyleNum="dsVariable"/>
      <itemData name="Number" defStyleNum="dsDecVal"/>
      <itemData name="OctalNumber" defStyleNum="dsBaseN"/>
      <itemData name="HexNumber" defStyleNum="dsBaseN"/>
      <itemData name="SyntaxError" defStyleNum="dsError"/>
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="&quot;"/>
    </comments>
    <keywords casesensitive="1" weakDeliminator="&lt;&gt;"/>
  </general>
</language>
